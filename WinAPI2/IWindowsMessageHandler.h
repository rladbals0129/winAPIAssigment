#pragma once
#pragma region 순수가상함수 
/*
▶ 순수 가상 함수

- 함수의 구현부가 없고, 기분적으로 선언부가 = 0 으로 끝나는 가상함수를 뜻한다.
	ㄴ 추상화의 대장
		ㄴ 설계에 기반한다. 얼마나 잘 설계했냐에 따라 활용성이 달라짐

- 부모클래스에서 순수 가상함수를 선언하면 자식클래스에서 반드시 함수를 맴버로 가져와야 한다.

ex)
- 선언 예시
IFunction() = 0;
IFunction() = NULL;
IFunction() = PURE;
IFunction() = abstract;

▶ 추상 클래스

- 순수 가상 함수가 N개 이상 있는 클래스를 의미한다.

▷ 특징

1. 객체를 생성할 수 없다.

2. 포인터 변수는 만들 수 있다.
	(미리 찍어두겠다)

3. 추상클래스로 지정한객체는 인스턴스를 만들 수 없다
							ㄴ 클래스
4. 추상클래스의 자식클래스를 통해 인스턴스를 생성 할 수 있다.
	
5. C++언어가 개정되면서 추가된 abstract키워드를 통해서 명시하는 것은 가능
								//c++에서는 인터페이스를 뜻했음
6. C++11 이상의 버전에서는 맴버변수 또는 맴버 함수가 포함된 여부와 상관없이 
순수가상함수를 1개 이상 가지고 있다면 이 클래스는 추상 클래스로 승격이된다.

C++
class IWindowsMessageHandler abstract
{

};

C#
abstract class ITessellation
{

}

▶ 인터페이스 (추상클래스)

- OCP (개방 폐쇄의 원칙)
ㄴ 자신의 확장에는 열려있고, 주변 변화에 대해서는 닫혀있어야 한다.

- 순수 가상함수로만 이루어진 클래스를 인터페이스 라고 부른다.

- 인터페이스의 개념은 하위클래스에서 반드시 정의해야할 함수를 정해주는 클래스라고 할 수 있다.

- c/c++언어에서는 공식적으로 인터페이스 라는 기능을 지원하지 않는다.
										(기능적으로 지원하지 않기때문에 강제성이없다) ->그렇기떄문에 더 효율적인 코드가 나온다.
※ 표기법: 파스칼케이스 (I)

※ 구조도 (c++기준)

Interface -> (상속) -> abstract 클래스 (기본 기능 구현) -> (상속) -> 기본클래스 (순수가상함수 재정의)

예시) 휴머노이드 -> 상속 -> 남자,여자 -> 상속 -> 휴머노이드,인간,엘프 등등

▷ 인터페이스 특징

- 맴버 변수 및 함수를 포함할 수 없다. (정적함수포함)

- 속성을 정의하는 한정자를 사용할 수 없다
ㄴ ex) const

- 기본 클래스를 상속 받을 수 없다.(구조상 최상위)

- 인터페이스가 되기 위해서는 순수가상함수만 포함 시켜야 한다.

- 생성자 / 소멸자 / 연산자를 포함 할 수 없다

- 상속이 전제되기 떄문에 public 속성을 가지고 있어야 한다.

▷ 장점

- 다중 상속에서의 안정성이 좋다.
ㄴ C++ 언어에서 많이 발생하는 다중상속 / 중첩화 현상을 방지할 수 있다.
ㄴ 인터페이스를 이용하면 중첩화 현상 없이 다중상속을 가능하게 한다.

▷ 단점

- 추상화를 기본으로 삼아 구현하기 때문에 가독성이 떨어진다

-c++ 언어에서는 키워드를 사용할 수 없기 때문에 맴버변수 선언 등에 주의를 요해야 한다

- 강제성이 없고 프로그래머에 의한 실수가 별생할 여지가 아주 다분하다.


★ ★ ★ ★ ★ ★ ★ ★ ★ 가상 소멸자★ ★ ★ ★ ★ ★ ★ ★ ★ ★ 

- 상속관계에서 사용하면 자식클래스의 소멸자를 호출한다는 점에서 잠재적인 오류를 예방할 수 있지만
상속관계가 아닐경우 성능저하가 발생하기 때문에 주의해야 한다. (cost가높다)



*/
#pragma endregion
//사용 샘플
/*
__interface IGameClass //__
{
	virtual void idle() PURE;
	virtual void attack() PURE;

};

class CharacterChoices abstract : public IGameClass
{
private:

public:

};

//파생클래스

class Warrior : public CharacterChoices
{
private:

public:
	virtual void idle();
	virtual void attack();
};




class IWindowsMessageHandler
{
public:
	IWindowsMessageHandler();
	~IWindowsMessageHandler();
};

*/

